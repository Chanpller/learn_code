<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 实验一 [重要]创建bean -->
    <bean id="happyComponent" class="com.chanpller.spring6_springboot3_ssm.chapter2.HappyComponent" />

    <!--静态工程创建实例-->
    <bean id="clientService"
          class="com.chanpller.spring6_springboot3_ssm.chapter2.ClientService"
          factory-method="createInstance"/>


    <!-- 将工厂类进行ioc配置 -->
    <bean id="serviceLocator" class="com.chanpller.spring6_springboot3_ssm.chapter2.DefaultServiceLocator">
    </bean>

    <!-- 根据工厂对象的实例工厂方法进行实例化组件对象 -->
    <bean id="clientService2"
          factory-bean="serviceLocator"
          factory-method="createClientServiceInstance"/>


    <!-- 引用类bean声明 -->
    <bean id="userService2" class="com.chanpller.spring6_springboot3_ssm.chapter2.UserService">
        <!-- 构造函数引用 -->
        <constructor-arg ref="userDao2"/>
    </bean>
    <!-- 被引用类bean声明 -->
    <bean id="userDao2" class="com.chanpller.spring6_springboot3_ssm.chapter2.UserDao"/>


    <!-- 场景1: 多参数，可以按照相应构造函数的顺序注入数据 -->
        <bean id="userService" class="com.chanpller.spring6_springboot3_ssm.chapter2.UserService">
            <!-- value直接注入基本类型值 -->
            <constructor-arg  value="18"/>
            <constructor-arg  value="赵伟风"/>

            <constructor-arg  ref="userDao"/>
        </bean>
        <!-- 被引用类bean声明 -->
        <bean id="userDao" class="com.chanpller.spring6_springboot3_ssm.chapter2.UserDao"/>


    <!-- 场景2: 多参数，可以按照相应构造函数的名称注入数据 -->
        <bean id="userService3" class="com.chanpller.spring6_springboot3_ssm.chapter2.UserService">
            <!-- value直接注入基本类型值 -->
            <constructor-arg name="name" value="赵伟风"/>
            <constructor-arg name="userDao" ref="userDao3"/>
            <constructor-arg name="age"  value="18"/>
        </bean>
        <!-- 被引用类bean声明 -->
        <bean id="userDao3" class="com.chanpller.spring6_springboot3_ssm.chapter2.UserDao"/>

    <!-- 场景2: 多参数，可以按照相应构造函数的角标注入数据
               index从0开始 构造函数(0,1,2....)
    -->
        <bean id="userService4" class="com.chanpller.spring6_springboot3_ssm.chapter2.UserService">
            <!-- value直接注入基本类型值 -->
            <constructor-arg index="1" value="赵伟风"/>
            <constructor-arg index="2" ref="userDao4"/>
            <constructor-arg index="0"  value="18"/>
        </bean>
        <!-- 被引用类bean声明 -->
        <bean id="userDao4" class="com.chanpller.spring6_springboot3_ssm.chapter2.UserDao"/>


    <bean id="simpleMovieLister" class="com.chanpller.spring6_springboot3_ssm.chapter2.SimpleMovieLister">
        <!-- setter方法，注入movieFinder对象的标识id
             name = 属性名  ref = 引用bean的id值
         -->
        <property name="movieFinder" ref="movieFinder" />

        <!-- setter方法，注入基本数据类型movieName
             name = 属性名 value= 基本类型值
         -->
        <property name="movieName" value="消失的她"/>
    </bean>

    <bean id="movieFinder" class="com.chanpller.spring6_springboot3_ssm.chapter2.MovieFinder"/>

    <!--init-method 初始化方法名-->
    <!--destroy-method 销毁方法名-->
    <bean id="beanOne" class="com.chanpller.spring6_springboot3_ssm.chapter2.BeanOne" init-method="init" depends-on="beanTwo" />
    <bean id="beanTwo" class="com.chanpller.spring6_springboot3_ssm.chapter2.BeanTwo" init-method="init" destroy-method="cleanup" />
    <!--bean的作用域
    准备两个引用关系的组件类即可！！
-->
    <!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 -->
    <!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 -->
    <bean id="happyMachine8" scope="prototype" class="com.chanpller.spring6_springboot3_ssm.chapter2.HappyMachine">
        <property name="machineName" value="happyMachine"/>
    </bean>

    <bean id="happyComponent8" scope="singleton" class="com.chanpller.spring6_springboot3_ssm.chapter2.HappyComponent">
        <property name="componentName" value="happyComponent"/>
    </bean>

    <!-- FactoryBean机制 -->
    <!-- 这个bean标签中class属性指定的是HappyFactoryBean，但是将来从这里获取的bean是HappyMachine对象 -->
    <bean id="happyMachine7" class="com.chanpller.spring6_springboot3_ssm.chapter2.HappyFactoryBean">
        <!-- property标签仍然可以用来通过setXxx()方法给属性赋值 -->
        <property name="machineName" value="iceCreamMachine"/>
    </bean>
</beans>